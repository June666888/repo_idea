<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.june.dao.UserMapper">
    <!--用户分页&多条件组合查询  public List<User> findAllUserByPage(UserVo userVo);-->
    <select id="findAllUserByPage" parameterType="com.june.domain.UserVo" resultType="com.june.domain.User">
        SELECT
            id,
            NAME,
            portrait,
            phone,
            PASSWORD,
            STATUS,
            create_time
        FROM USER
        <where>
            <if test="true">
                and is_del != 1
            </if>
            <if test="username != null and username!= ''">
                and name = #{username}
            </if>
            <if test="startCreateTime != null and endCreateTime != null">
                and create_time BETWEEN #{startCreateTime} AND #{endCreateTime}
            </if>
        </where>
    </select>

    <!--修改用户状态  public void updateUserStatus(int id, String status);-->
    <update id="updateUserStatus">
        UPDATE USER SET STATUS = #{status} where id = #{id}
    </update>

    <!--用户登录方法：根据用户名查询具体的用户信息  public User login(User user);-->
    <select id="login" parameterType="com.june.domain.User" resultType="com.june.domain.User">
        select * from user where phone=#{phone}
    </select>

    <!--1.根据用户id查询关联的角色信息  public List<Role> findUserRelationRoleById(int id);-->
    <select id="findUserRelationRoleById" parameterType="int" resultType="com.june.domain.Role">
        select * from roles r inner join user_role_relation ur on r.id=ur.role_id where ur.user_id =#{userid}
    </select>

    <!--根据用户id清空中间表的关联关系  public void deleteUserContextRole(Integer userId);-->
    <delete id="deleteUserContextRole" parameterType="int">
        delete from user_role_relation where user_id = #{userid}
    </delete>

    <!--为用户分配角色  public void userContextRole(User_Role_relation user_role_relation);-->
    <insert id="userContextRole" parameterType="com.june.domain.User_Role_relation">
        insert into user_role_relation values(null,#{userId},#{roleId},#{createdTime},#{updatedTime},#{createdBy},#{updatedby})
    </insert>

    <!--2.根据角色id查询父菜单  public List<Menu> findParentMenuByRoleId(List<Integer> ids);-->
    <select id="findParentMenuByRoleId" parameterType="java.util.List" resultType="com.june.domain.Menu">
        SELECT DISTINCT m.*
        FROM roles r INNER JOIN role_menu_relation rm ON r.id = rm.role_id
                     INNER JOIN menu m ON rm.menu_id = m.id
        WHERE m.parent_id = -1 AND r.id IN
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <!--3.对父菜单关联的子菜单进行关联查询  public List<Menu> findSubMenuByPid(Integer pid);-->
    <select id="findSubMenuByPid" parameterType="int" resultType="com.june.domain.Menu">
        select * from menu where parent_id = #{pid}
    </select>

    <!--4.获取资源信息  public List<Resource> findResourceByRoleId(List<Integer> ids);-->
    <select id="findResourceByRoleId" parameterType="java.util.List" resultType="com.june.domain.Resource">
        SELECT DISTINCT rc.*
        FROM roles r INNER JOIN role_resource_relation rr ON r.id =rr.role_id
                     INNER JOIN resource rc ON rr.resource_id = rc.id
        WHERE r.id IN
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
</mapper>